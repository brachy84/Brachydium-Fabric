plugins {
	id 'fabric-loom' version '0.5-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

	// REI
	maven { url "https://maven.shedaniel.me/" }

	// LibMultiPart & LibBlockAttributes
	maven {
		name = "BuildCraft"
		url = "https://mod-buildcraft.com/maven"
	}
	// ARRP
	maven {
		url = 'https://raw.githubusercontent.com/Devan-Kerman/Devan-Repo/master/'
	}
	// temporary
	maven {
		name = "Technici4n"
		url = "https://raw.githubusercontent.com/Technici4n/Technici4n-maven/master/"
		content {
			includeGroup "net.fabricmc.fabric-api"
			includeGroup "dev.technici4n"
		}
	}
	// Astarre
	maven {
		url "https://storage.googleapis.com/devan-maven/"
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Experimental fluid API
	//include modImplementation("net.fabricmc.fabric-api:fabric-transfer-api-v1:0.1.0+751df5d17d")

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modCompileOnly "me.shedaniel:RoughlyEnoughItems-api:${project.rei_version}"
	modRuntime "me.shedaniel:RoughlyEnoughItems:${project.rei_version}"
	//modCompile "alexiil.mc.lib:libmultipart-base:${project.libmultipart_version}"
	//modCompile "alexiil.mc.lib:libblockattributes-all:0.8.4"
	//modImplementation "com.lettuce.fudge:artifice:${project.artifice_version}"
	//include "com.lettuce.fudge:artifice:${project.artifice_version}"
	//modImplementation "de.siphalor:nbtcrafting-1.16:2+"
	modImplementation group: 'net.devtech', name: 'arrp', version: project.arrp_version

	//include modApi("dev.technici4n:FastTransferLib:${project.ftl_version}")

	//modImplementation "io.github.astrarre:astrarre-fabric:0.0.0"
	modImplementation 'io.github.astrarre:astrarre-gui-v0-fabric:1.0.0'
	include(modImplementation('io.github.astrarre:astrarre-access-v0-fabric:1.0.0'))
	include('io.github.astrarre:astrarre-util-v0-fabric:1.0.0')
	include('io.github.astrarre:astrarre-itemview-v0-fabric:1.0.0')
	modImplementation 'io.github.astrarre:astrarre-transfer-v0-fabric:1.1.0'
	include('io.github.astrarre:astrarre-transfer-compat-v0-fabric:0.0.0');
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
	// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
	// We'll use that if it's available, but otherwise we'll use the older option.
	def targetVersion = 8
	if (JavaVersion.current().isJava9Compatible()) {
		 it.options.release = targetVersion
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}
    
    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

runClient {
	jvmArgs "-Xmx4G"
}
